routes.index.legend     = Routes
routes.index.name       = Name
routes.index.incoming.type   = Incoming Type
routes.index.incoming.id     = Incoming ID
routes.index.incoming.device = Device
routes.index.incoming.rest   = REST
routes.index.incoming.sms    = SMS
routes.index.outgoing.type   = Outgoing Type
routes.index.outgoing.id     = Outgoing ID
routes.index.outgoing.device = Device
routes.index.outgoing.rest   = REST
routes.index.outgoing.sms    = SMS
routes.index.active     = Active?
routes.index.actions    = Actions
routes.show.legend      = Route Details
routes.show.name        = Name
routes.show.description = Description
routes.show.incoming.device = Incoming Device
routes.show.incoming.channel = Incoming Channel
routes.show.outgoing.type = Outgoing Type
routes.show.outgoing.type.device = Device
routes.show.outgoing.type.sms = SMS
routes.show.outgoing.type.rest = REST
routes.show.message_filter = Filtering Expression
routes.show.transformation_chain = Transformation Chain
routes.show.active      = Active?
routes.form.legend      = Event Route
routes.form.name        = Name
routes.form.name.placeholder = Type your route name here...
routes.form.description = Description
routes.form.description.placeholder = Type some about your device (optional)
routes.form.incoming.device = Incoming Device
routes.form.incoming.channel = Incoming Channel
routes.form.incoming.channel.placeholder = Type your incoming device's channel here...
routes.form.outgoing.type = Outgoing Type
routes.form.outgoing.type.device = Device
routes.form.outgoing.type.sms = SMS
routes.form.outgoing.type.rest = REST
routes.form.message_filter = Filtering Expression
routes.form.message_filter.placeholder = Type an Expression Language to filter incoming events. Json payload values can be accessed via: #fieldName].
routes.form.transformation_chain = Transformation Chain
routes.form.transformation.empty = Select an option...
routes.form.active      = Active?
routes.form.modal.remove.firstLine = You are about to remove this Route.
routes.form.modal.remove.secondLine = Do you want to proceed?
routes.device-outgoing.device = Outgoing Device
routes.device-outgoing.channel = Outgoing Channel
routes.device-outgoing.channel.placeholder = Type your outgoing device's channel here...
routes.sms-outgoing.destination = SMS Destination
routes.sms-outgoing.text = SMS Text
routes.sms-outgoing.forward = Message forward
routes.sms-outgoing.custom = Custom message
routes.sms-outgoing.custom.template = Custom SMS Template
routes.sms-outgoing.custom.template.placeholder = Type your custom text here...
routes.rest-outgoing.destination = REST Destination

# Backend messages

model.event_route.name.not_null = Name cannot be null or empty
model.event_route.incoming_actor.not_null = Incoming actor cannot be null
model.event_route.incoming_actor_uri.not_null = Incoming actor's URI cannot be null or empty
model.event_route.incoming_uri.must_be_a_device = Incoming URI must be an Device URI
model.event_route.incoming_actor.channel.not_null = A valid MQTT incoming channel is required
model.event_route.outgoing_actor.not_null = Outgoing actor cannot be null
model.event_route.outgoing_actor_uri.not_null = Outgoing actor's URI cannot be null or empty
model.event_route.outgoing_uri.must_be_a_device = Outgoing URI must be an Device URI
model.event_route.outgoing_uri.must_be_a_sms = SMS Outgoing URI must be an SMS URI
model.event_route.outgoing_actor.channel.not_null = A valid MQTT outgoing channel is required
model.event_route.outgoing_sms.custom_text.mandatory = Custom Text is Mandatory if SMS Strategy is Custom Text
model.event_route.outgoing_sms.invalid_strategy = Invalid SMS Strategy: {0}

service.event_route.incoming_outgoing_channels.same = Incoming and outgoing channels cannot be the same
service.event_route.name.in_use = Event route name is already in use
service.event_route.guid.not_null = GUID cannot be null or empty
service.event_route.uri.not_null = URI cannot be null
service.event_route.not_found = Event route does not exist

controller.event_route.registered.succesfully = Event route registered successfully
controller.event_route.removed.succesfully = Event Route was successfully removed
